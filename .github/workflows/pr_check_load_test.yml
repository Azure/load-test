name: pr build check for some E2E tests

on:
  push:
    branches:
      - releases/*
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - releases/*
      - main

# NOTE : This workflow doesn't run on PRs against forks of this repositories
# Since they won't have access to the repository secrets. Ref: https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
# CONFIGURATION
# For help, go to https://github.com/Azure/Actions
#
# 1. Set up the following secrets in your repository:
#   AZURE_CREDENTIALS
#
# 2. Change these variables for your configuration:

env:
  LOAD_TEST_RESOURCE: ${{ secrets.LOAD_TEST_RESOURCE_NAME }}
  LOAD_TEST_RESOURCE_GROUP: ${{ secrets.LOAD_TEST_RESOURCE_GROUP_NAME }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents : read # This is required for actions/checkout

jobs:
  setup-os-for-tests:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.set-os.outputs.os }}
    steps:
      - name: Generate Random OS
        id: set-os
        run: |
          os_options=('ubuntu-latest' 'windows-latest')
          rand_os=${os_options[$((RANDOM % 2))]}  # Randomly choose an OS
          echo "Selected OS: $rand_os"
          echo "os=$rand_os" >> $GITHUB_ENV

  run-integration-test:
    environment: automation test
    name: Validate PR
    strategy:
      matrix:
        configFile: ['sample-test-url.yaml', 'sample-test-jmx.yaml', 'sample-test-locust.yaml']
        
    runs-on: ${{ needs.setup-os-for-tests.outputs.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
  
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'
  
      - name: Installing dependencies and building latest changes
        run: |
          npm install --include=dev -f
          npm ci
        shell: bash
  
      - name: Azure authentication
        uses: azure/login@v1
        continue-on-error: false
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: Generate GUID
        id: guid
        run: |
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              echo "::set-output name=GUID::$(powershell -Command "[guid]::NewGuid().ToString()")"
            else
              echo "::set-output name=GUID::$(uuidgen)"
            fi
        shell : bash
    
      - name: 'Azure Load Testing'
        uses: ./
        id: alt
        with:
          loadTestConfigFile: ${{ matrix.configFile }}
          loadTestResource: ${{ env.LOAD_TEST_RESOURCE }}
          resourceGroup: ${{ env.LOAD_TEST_RESOURCE_GROUP }}
          overRideParameters: "{\"testId\":\"${{ steps.guid.outputs.GUID }}\"}"
          outputVariableName: 'loadTestRunId'
        continue-on-error: true
  
      - name: Print the Output
        run: echo "The Test ID is ${{ steps.alt.outputs['loadTestRunId.testRunId'] }}"
        shell: bash
  
      - name: Check for results and report files
        run: |
          if [[ -d "./loadTest" ]]; then
            if [[ -f "./loadTest/results.zip" && -f "./loadTest/report.zip" ]]; then
              echo "Both results.zip and report.zip files are present."
            else
              echo "One or both of the files are missing."
              exit 1
            fi
          else
            echo "loadTest directory is missing."
            exit 1
          fi
        shell: bash
        